name: Laravel CI/CD

on:
  push:
    branches:
      - feature
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: Run CI tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: fp_pso
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: fp_pso
      DB_USERNAME: root
      DB_PASSWORD: root
      APP_ENV: testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, bcmath, mysql, xml, curl, gd
          ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=512M

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test --verbose

      - name: Prepare Laravel
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h127.0.0.1 -uroot -proot --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run Migrations and Seeders
        run: |
          php artisan migrate:fresh --env=testing --force
          php artisan db:seed --env=testing --force

      - name: Run Tests
        run: vendor/bin/phpunit --testdox

  auto-merge:
    name: Auto-merge PR to main
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Auto-merge Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
              merge_method: "squash"
            });
            console.log(`✅ Merged PR #${pr_number}`);

  cd:
    name: Deploy to GCP Cloud Run
    needs: [ci, auto-merge]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Build and Push Docker Image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/gcr:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/gcr:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy hrms-service \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/gcr:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --service-account hrms-deployment@feisty-reality-461020-d5.iam.gserviceaccount.com \
            --set-env-vars "APP_ENV=production,APP_DEBUG=false,APP_KEY=${{ secrets.APP_KEY }},DB_CONNECTION=mysql,DB_HOST=${{ secrets.CLOUD_SQL_HOST }},DB_PORT=3306,DB_DATABASE=fp_pso,DB_USERNAME=root,DB_PASSWORD=,APP_LOG_CHANNEL=stack" \
            --timeout 600 \
            --memory 512Mi \
            --cpu 1 \
            --allow-unauthenticated \
            --quiet

      - name: Run Laravel Post-Deploy Commands
        run: |
          docker run --rm \
            -e DB_CONNECTION=mysql \
            -e DB_HOST=${{ secrets.CLOUD_SQL_HOST }} \
            -e DB_PORT=3306 \
            -e DB_DATABASE=fp_pso \
            -e DB_USERNAME=root \
            -e DB_PASSWORD='' \
            -e APP_KEY=${{ secrets.APP_KEY }} \
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/gcr:${{ github.sha }} \
            sh -c "
              php artisan config:clear &&
              php artisan migrate --force &&
              php artisan cache:clear
            "

      - name: Test DB Connection
        run: |
          docker run --rm \
            -e DB_CONNECTION=mysql \
            -e DB_HOST=${{ secrets.CLOUD_SQL_HOST }} \
            -e DB_PORT=3306 \
            -e DB_DATABASE=fp_pso \
            -e DB_USERNAME=root \
            -e DB_PASSWORD='' \
            -e APP_KEY=${{ secrets.APP_KEY }} \
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/gcr:${{ github.sha }} \
            php artisan tinker --execute="DB::connection()->getPdo(); echo 'Connection successful';"

      - name: Notify Success
        run: echo "✅ Deployment Succeeded"
